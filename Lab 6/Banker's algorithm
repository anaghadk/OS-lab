#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int main() {
    int n, m, i, j, k;

    printf("Enter number of processes -- ");
    scanf("%d", &n);

    printf("Enter number of resources -- ");
    scanf("%d", &m);

    int alloc[MAX_PROCESSES][MAX_RESOURCES];
    int max[MAX_PROCESSES][MAX_RESOURCES];
    int avail[MAX_RESOURCES];
    int need[MAX_PROCESSES][MAX_RESOURCES];

    for (i = 0; i < n; i++) {
        printf("Enter details for P%d\n", i);
        printf("Enter allocation -- ");
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);
        printf("Enter Max -- ");
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);
    }

    printf("Enter Available Resources -- ");
    for (i = 0; i < m; i++)
        scanf("%d", &avail[i]);

    int pid, req[MAX_RESOURCES];
    printf("Enter New Request Details --\n");
    printf("Enter pid -- ");
    scanf("%d", &pid);
    printf("Enter Request for Resources -- ");
    for (i = 0; i < m; i++)
        scanf("%d", &req[i]);

    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    bool finish[MAX_PROCESSES] = {false};
    int safeSeq[MAX_PROCESSES];
    int work[MAX_RESOURCES];

    for (i = 0; i < m; i++)
        work[i] = avail[i];

    int count = 0;
    while (count < n) {
        bool found = false;
        for (i = 0; i < n; i++) {
            if (!finish[i]) {
                bool possible = true;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        possible = false;
                        break;
                    }
                }
                if (possible) {
                    for (k = 0; k < m; k++)
                        work[k] += alloc[i][k];
                    safeSeq[count++] = i;
                    finish[i] = true;
                    printf("P%d is visited( ", i);
                    for (k = 0; k < m; k++)
                        printf("%d ", work[k]);
                    printf(")\n");
                    found = true;
                }
            }
        }
        if (!found) {
            printf("SYSTEM IS NOT IN SAFE STATE\n");
            return 0;
        }
    }

    printf("SYSTEM IS IN SAFE STATE\n");
    printf("The Safe Sequence is -- (");
    for (i = 0; i < n; i++) {
        printf("P%d", safeSeq[i]);
        if (i != n - 1)
            printf(" ");
    }
    printf(" )\n");

    printf("\nProcess\t\tAllocation\tMax\t\t\t\tNeed\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t\t", i);
        for (j = 0; j < m; j++)
            printf("%d ", alloc[i][j]);
        printf("\t");
        for (j = 0; j < m; j++)
            printf("%d ", max[i][j]);
        printf("\t");
        for (j = 0; j < m; j++)
            printf("%d ", need[i][j]);
        printf("\n");
    }

    return 0;
}
                                                                                               
